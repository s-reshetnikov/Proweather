apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'io.fabric'

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print(propName + " does not exist in " + filename + "!")
        }
    } else {
        print(filename + " does not exist!")
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "by.reshetnikov.proweather"
        minSdkVersion 15
        targetSdkVersion 26
        versionName '0.9'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [crashlyticsKey: getProperty("keys.properties", "crashlytics_api_key"),
                                googleMapsKey : getProperty("keys.properties", "google_maps_api_key")]
        buildConfigField "String", "OWM_API_KEY", "\"${getProperty("keys.properties", "owm_api_key")}\""
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
        }
        release {
            minifyEnabled true
            shrinkResources true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets { main { res.srcDirs = ['src/main/res', 'src/main/res/anim'] } }
    productFlavors {
    }
}

ext {
    supportLibVersion = '26.1.0'
    constraintLayoutVersion = '1.0.2'
    playServicesVerion = '11.4.2'
    okhttpVersion = '3.9.0'
    daggerVersion = '2.11'
    butterKnifeVersion = '8.5.1'
    rxJavaVersion = '2.1.5'
    rxAndroidVersion = '2.0.1'
    gsonVersion = '2.8.0'
    converterGsonVersion = '2.3.0'
    rxLocationVersion = '1.0.3'

    daoVersion = '3.2.2'
    timberVersion = '4.5.1'
    MPAndroidChartVersion = 'v3.0.2'
    crashlyticsVersion = '2.6.8'
    // tests
    jUnitVersion = '4.12'
    mockitoVersion = '1.10.19'
    powerMockitoVersion = '1.6.2'
    hamcrestVersion = '1.3'
    runnerVersion = '0.5'
    rulesVersion = '0.5'
    espressoVersion = '2.2.2'
    dbDebugVersion = '1.0.1'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //debug only
    debugCompile "com.amitshekhar.android:debug-db:${dbDebugVersion}"

    // support libs
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:support-vector-drawable:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support.constraint:constraint-layout:${constraintLayoutVersion}"

    // play services
    compile "com.google.android.gms:play-services-location:${playServicesVerion}"
    compile "com.google.android.gms:play-services-maps:${playServicesVerion}"

    // rxJava 2
    compile "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    compile "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"

    // network
    compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"
    compile "com.squareup.retrofit2:converter-gson:${converterGsonVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${converterGsonVersion}"
    compile "com.google.code.gson:gson:${gsonVersion}"

    // dependency injection
    compile "com.google.dagger:dagger:${daggerVersion}"
    compile "com.google.dagger:dagger-android:${daggerVersion}"
    compile "com.google.dagger:dagger-android-support:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    //rxLocation
    compile "com.patloew.rxlocation:rxlocation:${rxLocationVersion}"

    // green DAO
    compile "org.greenrobot:greendao:${daoVersion}"

    // other
    compile "com.jakewharton:butterknife:${butterKnifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterKnifeVersion}"

    // logging
    compile "com.jakewharton.timber:timber:${timberVersion}"
    compile("com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}@aar") {
        transitive = true
    }

    // chart
    compile "com.github.PhilJay:MPAndroidChart:${MPAndroidChartVersion}"

    // testing
    testCompile "junit:junit:${jUnitVersion}"
    testCompile "org.mockito:mockito-all:${mockitoVersion}"
    testCompile "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testCompile "org.powermock:powermock-module-junit4:${powerMockitoVersion}"
    testCompile "org.powermock:powermock-api-mockito:${powerMockitoVersion}"
    testCompile "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
}
